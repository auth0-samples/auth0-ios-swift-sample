#!/bin/bash

export SCRIPT_DIR=$(dirname "$0")

##
## Configuration Variables
##

# The name of the keychain to create for iOS code signing.
KEYCHAIN=ios-build.keychain

##
## Build Process
##
check_if_pr_only_adds_markdown_files()
{
  if [ "$PULL_REQUEST" == "false" ]
  then
    echo "false"
  else
    echo `curl -v -H "Authorization: token $GITHUB_ACCESS_TOKEN" "https://api.github.com/repos/$REPO_SLUG/pulls/$PULL_REQUEST/files" | ruby -e "require 'json'; puts JSON.parse(STDIN.read).all? { |file| file['filename'].end_with?('.md') }"`
  fi
}

main ()
{
    if [ "$(check_if_pr_only_adds_markdown_files)" == "true" ]
    then
      echo "Skipping build because this pull request only adds / modifies markdown files."
      exit 0
    fi

    if [ -f Cartfile.resolved ] && [ -f "$SCRIPT_DIR/certificates/cibot.p12" ]
    then
      echo ""
      echo "####### Importing Developer Certificates #######"
      echo ""
      import_certs
    fi

    echo ""
    echo "####### Bootstrap Phase #######"
    echo ""
    RUNNING_ON_CI=1 DISABLE_CARTHAGE_CACHE_CONFIG=true script/bootstrap
    local status=$?

    if [ $status -eq 0 ]
    then
      echo ""
      echo ""
      echo "####### Build & Test Phase #######"
      echo ""
      set -o pipefail && RUNNING_ON_CI=1 script/test 2>&1 | tee /tmp/build.test-output.txt
      status=$?
      if [ ! $status -eq 0 ]
      then
        log_file_path=`cat /tmp/build.test-output.txt | tail -n 100 | perl -l -ne '/(\/var\/folders.*\/com\.apple\.dt\.XCTest-status.*)\)/ && print $1'`
        if [ ! -z "$log_file_path" ]
        then
          echo ""
          echo " → The tests have failed. Printing output of log file '$log_file_path'."
          cat $log_file_path
          echo ""
        fi
      fi
    fi

    if [ -f Cartfile.resolved ] && [ -f "$SCRIPT_DIR/certificates/cibot.p12" ]
    then
      delete_keychain
    fi
    exit $status
}

import_certs ()
{
    # If this environment variable is missing, we must not be running on Travis.
    if [ -z "$KEY_PASSWORD" ]
    then
        return 0
    fi

    echo " → Setting up code signing..."
    local password=cibuild

    # Create a temporary keychain for code signing.
    security create-keychain -p "$password" "$KEYCHAIN"
    security default-keychain -s "$KEYCHAIN"
    security unlock-keychain -p "$password" "$KEYCHAIN"
    security set-keychain-settings -t 3600 -l "$KEYCHAIN"

    # Download the certificate for the Apple Worldwide Developer Relations
    # Certificate Authority.
    local certpath="$SCRIPT_DIR/apple_wwdr.cer"
    curl -s 'https://developer.apple.com/certificationauthority/AppleWWDRCA.cer' > "$certpath"
    security import "$certpath" -k "$KEYCHAIN" -T /usr/bin/codesign

    # Import our development certificate.
    security import "$SCRIPT_DIR/certificates/cibot.p12" -k "$KEYCHAIN" -P "$KEY_PASSWORD" -T /usr/bin/codesign
}

delete_keychain ()
{
    if [ -z "$KEY_PASSWORD" ]
    then
        return 0
    fi

    echo " → Removing temporary keychain"
    security delete-keychain "$KEYCHAIN"
    echo "    ✔ Temporary keychain successfully removed."
}

export -f import_certs
export -f delete_keychain

main
