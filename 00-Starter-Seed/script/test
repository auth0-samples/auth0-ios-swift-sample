#!/bin/bash

set -e

source script/.env
source script/script_hooks/schemes
source script/script_hooks/destinations
source script/common/carthage
source script/common/swiftlint

run_tests ()
{
  test_command="set -o pipefail && xcodebuild -scheme $1"

  if [ -z "$XCODE_WORKSPACE" ]
  then
    test_command="$test_command -project $XCODE_PROJECT"
  else
    test_command="$test_command -workspace $XCODE_WORKSPACE"
  fi

  destination=$(scheme_destination $1)
  test_command="$test_command -destination $destination clean build test -configuration Debug"
  if type bundle > /dev/null && bundle show xcpretty > /dev/null
  then
    test_command="$test_command | bundle exec xcpretty -c"
    if type bundle > /dev/null && bundle show xcpretty-travis-formatter > /dev/null && [ "$TRAVIS" == "true" ]
    then
      formatter_class=`bundle exec xcpretty-travis-formatter`
      test_command="$test_command -f '$formatter_class'"
    fi
  fi

  echo ""
  echo " → Running tests for scheme '$1'"
  echo ""
  if [ ! -z "$VERBOSE" ]
  then
    echo $test_command
  fi
  eval $test_command
}

if [ -f Cartfile.resolved ]
then
  check_carthage_version
fi

if [ -f .swiftlint.yml ] && [ -z $DISABLE_SWIFTLINT ]
then
  echo ""
  echo " → Running swiftlint"
  echo ""
  check_swiftlint_version
  if [ ! -z "$RUNNING_ON_CI" ] && type bundle > /dev/null && bundle show linterbot > /dev/null && [ "$PULL_REQUEST" != "false" ]
  then
    echo ""
    echo " → Running linterbot"
    echo ""
    # || true avoid a the script to fail if the linter
    # does not returns successfully, which could happen
    # in case of severe lint errors
    swiftlint lint --reporter json > .swiftlint-report.json || true
    bundle exec linterbot $REPO_SLUG $PULL_REQUEST --trace < .swiftlint-report.json
  else
    swiftlint
  fi
fi

current_schemes=$(schemes)
if [ -z "$current_schemes" ]
then
  echo ""
  echo "ERROR: There are no schemes. Probably you forgot to share your schemes"
  exit 1
fi

for scheme in $current_schemes
do
  run_tests $scheme
done

if [ -f "$PROJECT_NAME.podspec" ] && [ "$LINT_PODSPEC" == "yes" ]
then
  echo ""
  echo " → Linting $PROJECT_NAME.podspec"
  echo ""
  if type bundle > /dev/null && bundle show pod > /dev/null
  then
    bundle exec pod lib lint $LINT_PODSPEC_PARAMETERS
  elif type pod > /dev/null
  then
    pod lib lint $LINT_PODSPEC_PARAMETERS
  fi
fi

if [ -z "$RUNNING_ON_CI" ] && [ -f .slather.yml ]
then
  bundle exec slather coverage -s
fi
